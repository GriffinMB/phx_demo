{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.5.json",
  "runs": [
    {
      "results": [
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "config/prod.exs"
                },
                "region": {
                  "endColumn": 1,
                  "endLine": 1,
                  "startColumn": 1,
                  "startLine": 1
                }
              }
            }
          ],
          "message": {
            "text": "Config.HTTPS: HTTPS Not Enabled"
          },
          "partialFingerprints": {
            "primaryLocationLineHash": "C15BCE8CAF49A8448E904E375BA0C396"
          },
          "ruleId": "SBLW009"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "lib/phx_demo_web/router.ex"
                },
                "region": {
                  "endColumn": 5,
                  "endLine": 9,
                  "startColumn": 5,
                  "startLine": 9
                }
              }
            }
          ],
          "message": {
            "text": "Config.CSP: Missing Content-Security-Policy"
          },
          "partialFingerprints": {
            "primaryLocationLineHash": "70682D8B69026A9A067A0A275B96949D"
          },
          "ruleId": "SBLW003"
        }
      ],
      "tool": {
        "driver": {
          "informationUri": "https://sobelow.io",
          "name": "Sobelow",
          "rules": [
            {
              "fullDescription": {
                "text": "XSS in `send_resp`"
              },
              "help": {
                "markdown": "# Cross-Site Scripting\n\nCross-Site Scripting (XSS) vulnerabilities are a resultof rendering untrusted input on a page without proper encoding.XSS may allow an attacker to perform actions on behalf ofother users, steal session tokens, or access private data.\n\nRead more about XSS here:https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)\n\nXSS checks can be ignored with the following command:\n\n    $ mix sobelow -i XSS",
                "text": "# Cross-Site Scripting\n\nCross-Site Scripting (XSS) vulnerabilities are a resultof rendering untrusted input on a page without proper encoding.XSS may allow an attacker to perform actions on behalf ofother users, steal session tokens, or access private data.\n\nRead more about XSS here:https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)\n\nXSS checks can be ignored with the following command:\n\n    $ mix sobelow -i XSS"
              },
              "id": "SBLW031",
              "name": "XSS.SendResp",
              "shortDescription": {
                "text": "XSS in `send_resp`"
              }
            },
            {
              "fullDescription": {
                "text": "XSS in `put_resp_content_type`"
              },
              "help": {
                "markdown": "# XSS in `put_resp_content_type`\n\nIf an attacker is able to set arbitrary content types for anHTTP response containing user input, the attacker is likely tobe able to leverage this for cross-site scripting (XSS).\n\nFor example, consider an endpoint that returns JSON with userinput:\n\n    {\"json\": \"user_input\"}\n\nIf an attacker can control the content type set in the HTTPresponse, they can set it to \"text/html\" and update theJSON to the following in order to cause XSS:\n\n    {\"json\": \"<script>alert(document.domain)</script>\"}\n\nContent Type checks can be ignored with the following command:\n\n    $ mix sobelow -i XSS.ContentType",
                "text": "# XSS in `put_resp_content_type`\n\nIf an attacker is able to set arbitrary content types for anHTTP response containing user input, the attacker is likely tobe able to leverage this for cross-site scripting (XSS).\n\nFor example, consider an endpoint that returns JSON with userinput:\n\n    {\"json\": \"user_input\"}\n\nIf an attacker can control the content type set in the HTTPresponse, they can set it to \"text/html\" and update theJSON to the following in order to cause XSS:\n\n    {\"json\": \"<script>alert(document.domain)</script>\"}\n\nContent Type checks can be ignored with the following command:\n\n    $ mix sobelow -i XSS.ContentType"
              },
              "id": "SBLW028",
              "name": "XSS.ContentType",
              "shortDescription": {
                "text": "XSS in `put_resp_content_type`"
              }
            },
            {
              "fullDescription": {
                "text": "XSS"
              },
              "help": {
                "markdown": "# Cross-Site Scripting\n\nCross-Site Scripting (XSS) vulnerabilities are a resultof rendering untrusted input on a page without proper encoding.XSS may allow an attacker to perform actions on behalf ofother users, steal session tokens, or access private data.\n\nRead more about XSS here:https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)\n\nXSS checks can be ignored with the following command:\n\n    $ mix sobelow -i XSS",
                "text": "# Cross-Site Scripting\n\nCross-Site Scripting (XSS) vulnerabilities are a resultof rendering untrusted input on a page without proper encoding.XSS may allow an attacker to perform actions on behalf ofother users, steal session tokens, or access private data.\n\nRead more about XSS here:https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)\n\nXSS checks can be ignored with the following command:\n\n    $ mix sobelow -i XSS"
              },
              "id": "SBLW030",
              "name": "XSS.Raw",
              "shortDescription": {
                "text": "XSS"
              }
            },
            {
              "fullDescription": {
                "text": "XSS in `html`"
              },
              "help": {
                "markdown": "# Cross-Site Scripting\n\nCross-Site Scripting (XSS) vulnerabilities are a resultof rendering untrusted input on a page without proper encoding.XSS may allow an attacker to perform actions on behalf ofother users, steal session tokens, or access private data.\n\nRead more about XSS here:https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)\n\nXSS checks can be ignored with the following command:\n\n    $ mix sobelow -i XSS",
                "text": "# Cross-Site Scripting\n\nCross-Site Scripting (XSS) vulnerabilities are a resultof rendering untrusted input on a page without proper encoding.XSS may allow an attacker to perform actions on behalf ofother users, steal session tokens, or access private data.\n\nRead more about XSS here:https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)\n\nXSS checks can be ignored with the following command:\n\n    $ mix sobelow -i XSS"
              },
              "id": "SBLW029",
              "name": "XSS.HTML",
              "shortDescription": {
                "text": "XSS in `html`"
              }
            },
            {
              "fullDescription": {
                "text": "SQL injection"
              },
              "help": {
                "markdown": "# SQL Injection\n\nSQL injection occurs when untrusted input is interpolateddirectly into a SQL query. In a typical Phoenix application,this would mean using the `Ecto.Adapters.SQL.query` methodand not using the parameterization feature.\n\nRead more about SQL injection here:https://www.owasp.org/index.php/SQL_Injection\n\nSQL injection checks can be ignored with the following command:\n\n    $ mix sobelow -i SQL",
                "text": "# SQL Injection\n\nSQL injection occurs when untrusted input is interpolateddirectly into a SQL query. In a typical Phoenix application,this would mean using the `Ecto.Adapters.SQL.query` methodand not using the parameterization feature.\n\nRead more about SQL injection here:https://www.owasp.org/index.php/SQL_Injection\n\nSQL injection checks can be ignored with the following command:\n\n    $ mix sobelow -i SQL"
              },
              "id": "SBLW017",
              "name": "SQL.Query",
              "shortDescription": {
                "text": "SQL injection"
              }
            },
            {
              "fullDescription": {
                "text": "SQL injection"
              },
              "help": {
                "markdown": "# SQL Injection\n\nSQL injection occurs when untrusted input is interpolateddirectly into a SQL query. In a typical Phoenix application,this would mean using the `Ecto.Adapters.SQL.query` methodand not using the parameterization feature.\n\nRead more about SQL injection here:https://www.owasp.org/index.php/SQL_Injection\n\nSQL injection checks can be ignored with the following command:\n\n    $ mix sobelow -i SQL",
                "text": "# SQL Injection\n\nSQL injection occurs when untrusted input is interpolateddirectly into a SQL query. In a typical Phoenix application,this would mean using the `Ecto.Adapters.SQL.query` methodand not using the parameterization feature.\n\nRead more about SQL injection here:https://www.owasp.org/index.php/SQL_Injection\n\nSQL injection checks can be ignored with the following command:\n\n    $ mix sobelow -i SQL"
              },
              "id": "SBLW018",
              "name": "SQL.Stream",
              "shortDescription": {
                "text": "SQL injection"
              }
            },
            {
              "fullDescription": {
                "text": "Directory Traversal in `send_file`"
              },
              "help": {
                "markdown": "# Path Traversal\n\nPath traversal vulnerabilities are a result ofinteracting with the filesystem using untrusted input.This class of vulnerability may result in file disclosure,code execution, denial of service, and other issues.\n\nRead more about Path Traversal here:https://www.owasp.org/index.php/Path_Traversal\n\nPath Traversal checks can be ignored with the following command:\n\n    $ mix sobelow -i Traversal",
                "text": "# Path Traversal\n\nPath traversal vulnerabilities are a result ofinteracting with the filesystem using untrusted input.This class of vulnerability may result in file disclosure,code execution, denial of service, and other issues.\n\nRead more about Path Traversal here:https://www.owasp.org/index.php/Path_Traversal\n\nPath Traversal checks can be ignored with the following command:\n\n    $ mix sobelow -i Traversal"
              },
              "id": "SBLW021",
              "name": "Traversal.SendFile",
              "shortDescription": {
                "text": "Directory Traversal in `send_file`"
              }
            },
            {
              "fullDescription": {
                "text": "Directory Traversal in `File` function"
              },
              "help": {
                "markdown": "# Path Traversal\n\nPath traversal vulnerabilities are a result ofinteracting with the filesystem using untrusted input.This class of vulnerability may result in file disclosure,code execution, denial of service, and other issues.\n\nRead more about Path Traversal here:https://www.owasp.org/index.php/Path_Traversal\n\nPath Traversal checks can be ignored with the following command:\n\n    $ mix sobelow -i Traversal",
                "text": "# Path Traversal\n\nPath traversal vulnerabilities are a result ofinteracting with the filesystem using untrusted input.This class of vulnerability may result in file disclosure,code execution, denial of service, and other issues.\n\nRead more about Path Traversal here:https://www.owasp.org/index.php/Path_Traversal\n\nPath Traversal checks can be ignored with the following command:\n\n    $ mix sobelow -i Traversal"
              },
              "id": "SBLW019",
              "name": "Traversal.FileModule",
              "shortDescription": {
                "text": "Directory Traversal in `File` function"
              }
            },
            {
              "fullDescription": {
                "text": "Directory Traversal in `send_download`"
              },
              "help": {
                "markdown": "# Path Traversal\n\nPath traversal vulnerabilities are a result ofinteracting with the filesystem using untrusted input.This class of vulnerability may result in file disclosure,code execution, denial of service, and other issues.\n\nRead more about Path Traversal here:https://www.owasp.org/index.php/Path_Traversal\n\nPath Traversal checks can be ignored with the following command:\n\n    $ mix sobelow -i Traversal",
                "text": "# Path Traversal\n\nPath traversal vulnerabilities are a result ofinteracting with the filesystem using untrusted input.This class of vulnerability may result in file disclosure,code execution, denial of service, and other issues.\n\nRead more about Path Traversal here:https://www.owasp.org/index.php/Path_Traversal\n\nPath Traversal checks can be ignored with the following command:\n\n    $ mix sobelow -i Traversal"
              },
              "id": "SBLW020",
              "name": "Traversal.SendDownload",
              "shortDescription": {
                "text": "Directory Traversal in `send_download`"
              }
            },
            {
              "fullDescription": {
                "text": "Code Execution in EEx template eval"
              },
              "help": {
                "markdown": "# Insecure EEx evaluation\n\nIf user input is passed to EEx eval functions, it may result inarbitrary code execution. The root cause of these issues is oftendirectory traversal.\n\nEEx checks can be ignored with the following command:\n\n    $ mix sobelow -i RCE.EEx",
                "text": "# Insecure EEx evaluation\n\nIf user input is passed to EEx eval functions, it may result inarbitrary code execution. The root cause of these issues is oftendirectory traversal.\n\nEEx checks can be ignored with the following command:\n\n    $ mix sobelow -i RCE.EEx"
              },
              "id": "SBLW016",
              "name": "RCE.EEx",
              "shortDescription": {
                "text": "Code Execution in EEx template eval"
              }
            },
            {
              "fullDescription": {
                "text": "Code execution in eval function"
              },
              "help": {
                "markdown": "# Remote Code Execution\n\nRemote Code Execution vulnerabilities are a result ofuntrusted user input being executed or interpreted bythe system and may result in complete system compromise.\n\nCode Execution checks can be ignored with thefollowing command:\n\n    $ mix sobelow -i RCE",
                "text": "# Remote Code Execution\n\nRemote Code Execution vulnerabilities are a result ofuntrusted user input being executed or interpreted bythe system and may result in complete system compromise.\n\nCode Execution checks can be ignored with thefollowing command:\n\n    $ mix sobelow -i RCE"
              },
              "id": "SBLW015",
              "name": "RCE.CodeModule",
              "shortDescription": {
                "text": "Code execution in eval function"
              }
            },
            {
              "fullDescription": {
                "text": "Unsafe `binary_to_term`"
              },
              "help": {
                "markdown": "# Insecure use of `binary_to_term`\n\nIf user input is passed to Erlang's `binary_to_term` functionit may result in memory exhaustion or code execution. Even withthe `:safe` option, `binary_to_term` will deserialize functions,and shouldn't be considered safe to use with untrusted input.\n\n`binary_to_term` checks can be ignored with the following command:\n\n    $ mix sobelow -i Misc.BinToTerm",
                "text": "# Insecure use of `binary_to_term`\n\nIf user input is passed to Erlang's `binary_to_term` functionit may result in memory exhaustion or code execution. Even withthe `:safe` option, `binary_to_term` will deserialize functions,and shouldn't be considered safe to use with untrusted input.\n\n`binary_to_term` checks can be ignored with the following command:\n\n    $ mix sobelow -i Misc.BinToTerm"
              },
              "id": "SBLW014",
              "name": "Misc.BinToTerm",
              "shortDescription": {
                "text": "Unsafe `binary_to_term`"
              }
            },
            {
              "fullDescription": {
                "text": "Missing CSRF Protections"
              },
              "help": {
                "markdown": "# Cross-Site Request Forgery\n\nIn a Cross-Site Request Forgery (CSRF) attack, an untrustedapplication can cause a user's browser to submit requests or performactions on the user's behalf.\n\nRead more about CSRF here:https://owasp.org/www-community/attacks/csrf\n\nCross-Site Request Forgery is flagged by `sobelow` whena pipeline fetches a session, but does not implement the`:protect_from_forgery` plug.\n\nCSRF checks can be ignored with the following command:\n\n    $ mix sobelow -i Config.CSRF",
                "text": "# Cross-Site Request Forgery\n\nIn a Cross-Site Request Forgery (CSRF) attack, an untrustedapplication can cause a user's browser to submit requests or performactions on the user's behalf.\n\nRead more about CSRF here:https://owasp.org/www-community/attacks/csrf\n\nCross-Site Request Forgery is flagged by `sobelow` whena pipeline fetches a session, but does not implement the`:protect_from_forgery` plug.\n\nCSRF checks can be ignored with the following command:\n\n    $ mix sobelow -i Config.CSRF"
              },
              "id": "SBLW005",
              "name": "Config.CSRF",
              "shortDescription": {
                "text": "Missing CSRF Protections"
              }
            },
            {
              "fullDescription": {
                "text": "CSRF via Action Reuse"
              },
              "help": {
                "markdown": "# Cross-Site Request Forgery\n\nIn a Cross-Site Request Forgery (CSRF) attack, an untrustedapplication can cause a user's browser to submit requests or performactions on the user's behalf.\n\nRead more about CSRF here:https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\n\nThis type of CSRF is flagged by `sobelow` when state-changingroutes share an action with GET-based routes. For example:\n\n    get \"/users\", UserController, :new    post \"/users\", UserController, :new\n\nIn this instance, it may be possible to trigger the POSTfunctionality with a GET request and query parameters.\n\nCSRF checks can be ignored with the following command:\n\n    $ mix sobelow -i Config.CSRFRoute",
                "text": "# Cross-Site Request Forgery\n\nIn a Cross-Site Request Forgery (CSRF) attack, an untrustedapplication can cause a user's browser to submit requests or performactions on the user's behalf.\n\nRead more about CSRF here:https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\n\nThis type of CSRF is flagged by `sobelow` when state-changingroutes share an action with GET-based routes. For example:\n\n    get \"/users\", UserController, :new    post \"/users\", UserController, :new\n\nIn this instance, it may be possible to trigger the POSTfunctionality with a GET request and query parameters.\n\nCSRF checks can be ignored with the following command:\n\n    $ mix sobelow -i Config.CSRFRoute"
              },
              "id": "SBLW004",
              "name": "Config.CSRFRoute",
              "shortDescription": {
                "text": "CSRF via Action Reuse"
              }
            },
            {
              "fullDescription": {
                "text": "Missing Secure Browser Headers"
              },
              "help": {
                "markdown": "# Missing Secure HTTP Headers\n\nBy default, Phoenix HTTP responses contain a number ofsecure HTTP headers that attempt to mitigate XSS,click-jacking, and content-sniffing attacks.\n\nMissing Secure HTTP Headers is flagged by `sobelow` whena pipeline accepts \"html\" requests, but does not implementthe `:put_secure_browser_headers` plug.\n\nSecure Headers checks can be ignored with the followingcommand:\n\n    $ mix sobelow -i Config.Headers",
                "text": "# Missing Secure HTTP Headers\n\nBy default, Phoenix HTTP responses contain a number ofsecure HTTP headers that attempt to mitigate XSS,click-jacking, and content-sniffing attacks.\n\nMissing Secure HTTP Headers is flagged by `sobelow` whena pipeline accepts \"html\" requests, but does not implementthe `:put_secure_browser_headers` plug.\n\nSecure Headers checks can be ignored with the followingcommand:\n\n    $ mix sobelow -i Config.Headers"
              },
              "id": "SBLW007",
              "name": "Config.Headers",
              "shortDescription": {
                "text": "Missing Secure Browser Headers"
              }
            },
            {
              "fullDescription": {
                "text": "Missing Content-Security-Policy"
              },
              "help": {
                "markdown": "# Missing Content-Security-Policy\n\nContent-Security-Policy is an HTTP header that helps mitigatea number of attacks, including Cross-Site Scripting.\n\nRead more about CSP here:https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP\n\nMissing Content-Security-Policy is flagged by `sobelow` whena pipeline implements the `:put_secure_browser_headers` plug,but does not provide a Content-Security-Policy header in thecustom headers map.\n\nWhen it comes to CSP, just about any policy is better than none.If you are unsure about which policy to use, the followingmitigates most typical XSS vectors:\n\n`plug :put_secure_browser_headers, %{\"content-security-policy\" => \"default-src 'self'\"}`\n\nDocumentation on the `put_secure_browser_headers` plug functioncan be found here:https://hexdocs.pm/phoenix/Phoenix.Controller.html#put_secure_browser_headers/2\n\nContent-Security-Policy checks can be ignored with the following command:\n\n    $ mix sobelow -i Config.CSP",
                "text": "# Missing Content-Security-Policy\n\nContent-Security-Policy is an HTTP header that helps mitigatea number of attacks, including Cross-Site Scripting.\n\nRead more about CSP here:https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP\n\nMissing Content-Security-Policy is flagged by `sobelow` whena pipeline implements the `:put_secure_browser_headers` plug,but does not provide a Content-Security-Policy header in thecustom headers map.\n\nWhen it comes to CSP, just about any policy is better than none.If you are unsure about which policy to use, the followingmitigates most typical XSS vectors:\n\n`plug :put_secure_browser_headers, %{\"content-security-policy\" => \"default-src 'self'\"}`\n\nDocumentation on the `put_secure_browser_headers` plug functioncan be found here:https://hexdocs.pm/phoenix/Phoenix.Controller.html#put_secure_browser_headers/2\n\nContent-Security-Policy checks can be ignored with the following command:\n\n    $ mix sobelow -i Config.CSP"
              },
              "id": "SBLW003",
              "name": "Config.CSP",
              "shortDescription": {
                "text": "Missing Content-Security-Policy"
              }
            },
            {
              "fullDescription": {
                "text": "Hardcoded Secret"
              },
              "help": {
                "markdown": "# Hard-coded Secrets\n\nIn the event of a source-code disclosure via file readvulnerability, accidental commit, etc, hard-coded secretsmay be exposed to an attacker. This may result indatabase access, cookie forgery, and other issues.\n\nSobelow detects missing hard-coded secrets by checking the prodconfiguration.\n\nHard-coded secrets checks can be ignored with the following command:\n\n    $ mix sobelow -i Config.Secrets",
                "text": "# Hard-coded Secrets\n\nIn the event of a source-code disclosure via file readvulnerability, accidental commit, etc, hard-coded secretsmay be exposed to an attacker. This may result indatabase access, cookie forgery, and other issues.\n\nSobelow detects missing hard-coded secrets by checking the prodconfiguration.\n\nHard-coded secrets checks can be ignored with the following command:\n\n    $ mix sobelow -i Config.Secrets"
              },
              "id": "SBLW010",
              "name": "Config.Secrets",
              "shortDescription": {
                "text": "Hardcoded Secret"
              }
            },
            {
              "fullDescription": {
                "text": "HTTPS Not Enabled"
              },
              "help": {
                "markdown": "# HTTPS\n\nWithout HTTPS, attackers in a priveleged network position canintercept and modify traffic.\n\nSobelow detects missing HTTPS by checking the prodconfiguration.\n\nHTTPS checks can be ignored with the following command:\n\n    $ mix sobelow -i Config.HTTPS",
                "text": "# HTTPS\n\nWithout HTTPS, attackers in a priveleged network position canintercept and modify traffic.\n\nSobelow detects missing HTTPS by checking the prodconfiguration.\n\nHTTPS checks can be ignored with the following command:\n\n    $ mix sobelow -i Config.HTTPS"
              },
              "id": "SBLW009",
              "name": "Config.HTTPS",
              "shortDescription": {
                "text": "HTTPS Not Enabled"
              }
            },
            {
              "fullDescription": {
                "text": "HSTS Not Enabled"
              },
              "help": {
                "markdown": "# HSTS\n\nThe HTTP Strict Transport Security (HSTS) header helpsdefend against man-in-the-middle attacks by preventingunencrypted connections.\n\nHSTS checks can be ignored with the following command:\n\n    $ mix sobelow -i Config.HSTS",
                "text": "# HSTS\n\nThe HTTP Strict Transport Security (HSTS) header helpsdefend against man-in-the-middle attacks by preventingunencrypted connections.\n\nHSTS checks can be ignored with the following command:\n\n    $ mix sobelow -i Config.HSTS"
              },
              "id": "SBLW008",
              "name": "Config.HSTS",
              "shortDescription": {
                "text": "HSTS Not Enabled"
              }
            },
            {
              "fullDescription": {
                "text": "Cross-Site Websocket Hijacking"
              },
              "help": {
                "markdown": "# Cross-Site Websocket Hijacking\n\nWebsocket connections are not bound by the same-origin policy.Connections that do not validate the origin may leak informationto an attacker.\n\nMore information can be found here: https://www.christian-schneider.net/CrossSiteWebSocketHijacking.html\n\nCross-Site Websocket Hijacking checks can be disabled withthe following command:\n\n    $ mix sobelow -i Config.CSWH",
                "text": "# Cross-Site Websocket Hijacking\n\nWebsocket connections are not bound by the same-origin policy.Connections that do not validate the origin may leak informationto an attacker.\n\nMore information can be found here: https://www.christian-schneider.net/CrossSiteWebSocketHijacking.html\n\nCross-Site Websocket Hijacking checks can be disabled withthe following command:\n\n    $ mix sobelow -i Config.CSWH"
              },
              "id": "SBLW006",
              "name": "Config.CSWH",
              "shortDescription": {
                "text": "Cross-Site Websocket Hijacking"
              }
            },
            {
              "fullDescription": {
                "text": "Command Injection in `System.cmd`"
              },
              "help": {
                "markdown": "# Command Injection\n\nCommand Injection vulnerabilities are a result ofpassing untrusted input to an operating system shell,and may result in complete system compromise.\n\nRead more about Command Injection here:https://www.owasp.org/index.php/Command_Injection\n\nCommand Injection checks can be ignored with thefollowing command:\n\n    $ mix sobelow -i CI",
                "text": "# Command Injection\n\nCommand Injection vulnerabilities are a result ofpassing untrusted input to an operating system shell,and may result in complete system compromise.\n\nRead more about Command Injection here:https://www.owasp.org/index.php/Command_Injection\n\nCommand Injection checks can be ignored with thefollowing command:\n\n    $ mix sobelow -i CI"
              },
              "id": "SBLW002",
              "name": "CI.System",
              "shortDescription": {
                "text": "Command Injection in `System.cmd`"
              }
            },
            {
              "fullDescription": {
                "text": "Command Injection in `:os.cmd`"
              },
              "help": {
                "markdown": "# Command Injection\n\nCommand Injection vulnerabilities are a result ofpassing untrusted input to an operating system shell,and may result in complete system compromise.\n\nRead more about Command Injection here:https://www.owasp.org/index.php/Command_Injection\n\nCommand Injection checks can be ignored with thefollowing command:\n\n    $ mix sobelow -i CI",
                "text": "# Command Injection\n\nCommand Injection vulnerabilities are a result ofpassing untrusted input to an operating system shell,and may result in complete system compromise.\n\nRead more about Command Injection here:https://www.owasp.org/index.php/Command_Injection\n\nCommand Injection checks can be ignored with thefollowing command:\n\n    $ mix sobelow -i CI"
              },
              "id": "SBLW001",
              "name": "CI.OS",
              "shortDescription": {
                "text": "Command Injection in `:os.cmd`"
              }
            },
            {
              "fullDescription": {
                "text": "Unsafe `String.to_atom`"
              },
              "help": {
                "markdown": "# Denial of Service via `String.to_atom`\n\nIn Elixir, atoms are not garbage collected. As such, if user inputis passed to the `String.to_atom` function, it may result in memoryexhaustion. Prefer the `String.to_existing_atom` function for untrusteduser input.\n\n`String.to_atom` checks can be ignored with the following command:\n\n    $ mix sobelow -i DOS.StringToAtom",
                "text": "# Denial of Service via `String.to_atom`\n\nIn Elixir, atoms are not garbage collected. As such, if user inputis passed to the `String.to_atom` function, it may result in memoryexhaustion. Prefer the `String.to_existing_atom` function for untrusteduser input.\n\n`String.to_atom` checks can be ignored with the following command:\n\n    $ mix sobelow -i DOS.StringToAtom"
              },
              "id": "SBLW013",
              "name": "DOS.StringToAtom",
              "shortDescription": {
                "text": "Unsafe `String.to_atom`"
              }
            },
            {
              "fullDescription": {
                "text": "Unsafe `List.to_atom`"
              },
              "help": {
                "markdown": "# Denial of Service via `List.to_atom`\n\nIn Elixir, atoms are not garbage collected. As such, if user inputis passed to the `List.to_atom` function, it may result in memoryexhaustion. Prefer the `List.to_existing_atom` function for untrusteduser input.\n\n`List.to_atom` checks can be ignored with the following command:\n\n    $ mix sobelow -i DOS.ListToAtom",
                "text": "# Denial of Service via `List.to_atom`\n\nIn Elixir, atoms are not garbage collected. As such, if user inputis passed to the `List.to_atom` function, it may result in memoryexhaustion. Prefer the `List.to_existing_atom` function for untrusteduser input.\n\n`List.to_atom` checks can be ignored with the following command:\n\n    $ mix sobelow -i DOS.ListToAtom"
              },
              "id": "SBLW012",
              "name": "DOS.ListToAtom",
              "shortDescription": {
                "text": "Unsafe `List.to_atom`"
              }
            },
            {
              "fullDescription": {
                "text": "Unsafe atom interpolation"
              },
              "help": {
                "markdown": "# Denial of Service via Unsafe Atom Interpolation\n\nIn Elixir, atoms are not garbage collected. As such, if user inputis used to create atoms (as in `:\"foo#{bar}\"`, or in `:erlang.binary_to_atom`),it may result in memory exhaustion. Prefer the `String.to_existing_atom`function for untrusted user input.\n\nAtom interpolation checks can be ignored with the following command:\n\n    $ mix sobelow -i DOS.BinToAtom",
                "text": "# Denial of Service via Unsafe Atom Interpolation\n\nIn Elixir, atoms are not garbage collected. As such, if user inputis used to create atoms (as in `:\"foo#{bar}\"`, or in `:erlang.binary_to_atom`),it may result in memory exhaustion. Prefer the `String.to_existing_atom`function for untrusted user input.\n\nAtom interpolation checks can be ignored with the following command:\n\n    $ mix sobelow -i DOS.BinToAtom"
              },
              "id": "SBLW011",
              "name": "DOS.BinToAtom",
              "shortDescription": {
                "text": "Unsafe atom interpolation"
              }
            },
            {
              "fullDescription": {
                "text": "Known Vulnerable Dependency - Update Plug"
              },
              "help": {
                "markdown": "# Known Vulnerable Dependencies\n\nAn application with known vulnerabilities is more easily subjectedto automated or targeted attacks.\n\nKnown Vulnerable checks can be ignored with the following command:\n\n    $ mix sobelow -i Vuln",
                "text": "# Known Vulnerable Dependencies\n\nAn application with known vulnerabilities is more easily subjectedto automated or targeted attacks.\n\nKnown Vulnerable checks can be ignored with the following command:\n\n    $ mix sobelow -i Vuln"
              },
              "id": "SBLW026",
              "name": "Vuln.PlugNull",
              "shortDescription": {
                "text": "Known Vulnerable Dependency - Update Plug"
              }
            },
            {
              "fullDescription": {
                "text": "Known Vulnerable Dependency - Update Plug"
              },
              "help": {
                "markdown": "# Known Vulnerable Dependencies\n\nAn application with known vulnerabilities is more easily subjectedto automated or targeted attacks.\n\nKnown Vulnerable checks can be ignored with the following command:\n\n    $ mix sobelow -i Vuln",
                "text": "# Known Vulnerable Dependencies\n\nAn application with known vulnerabilities is more easily subjectedto automated or targeted attacks.\n\nKnown Vulnerable checks can be ignored with the following command:\n\n    $ mix sobelow -i Vuln"
              },
              "id": "SBLW023",
              "name": "Vuln.Plug",
              "shortDescription": {
                "text": "Known Vulnerable Dependency - Update Plug"
              }
            },
            {
              "fullDescription": {
                "text": "Known Vulnerable Dependency - Update Plug"
              },
              "help": {
                "markdown": "# Known Vulnerable Dependencies\n\nAn application with known vulnerabilities is more easily subjectedto automated or targeted attacks.\n\nKnown Vulnerable checks can be ignored with the following command:\n\n    $ mix sobelow -i Vuln",
                "text": "# Known Vulnerable Dependencies\n\nAn application with known vulnerabilities is more easily subjectedto automated or targeted attacks.\n\nKnown Vulnerable checks can be ignored with the following command:\n\n    $ mix sobelow -i Vuln"
              },
              "id": "SBLW025",
              "name": "Vuln.HeaderInject",
              "shortDescription": {
                "text": "Known Vulnerable Dependency - Update Plug"
              }
            },
            {
              "fullDescription": {
                "text": "Known Vulnerable Dependency - Update Phoenix"
              },
              "help": {
                "markdown": "# Known Vulnerable Dependencies\n\nAn application with known vulnerabilities is more easily subjectedto automated or targeted attacks.\n\nKnown Vulnerable checks can be ignored with the following command:\n\n    $ mix sobelow -i Vuln",
                "text": "# Known Vulnerable Dependencies\n\nAn application with known vulnerabilities is more easily subjectedto automated or targeted attacks.\n\nKnown Vulnerable checks can be ignored with the following command:\n\n    $ mix sobelow -i Vuln"
              },
              "id": "SBLW027",
              "name": "Vuln.Redirect",
              "shortDescription": {
                "text": "Known Vulnerable Dependency - Update Phoenix"
              }
            },
            {
              "fullDescription": {
                "text": "Known Vulnerable Dependency - Update Coherence"
              },
              "help": {
                "markdown": "# Known Vulnerable Dependencies\n\nAn application with known vulnerabilities is more easily subjectedto automated or targeted attacks.\n\nKnown Vulnerable checks can be ignored with the following command:\n\n    $ mix sobelow -i Vuln",
                "text": "# Known Vulnerable Dependencies\n\nAn application with known vulnerabilities is more easily subjectedto automated or targeted attacks.\n\nKnown Vulnerable checks can be ignored with the following command:\n\n    $ mix sobelow -i Vuln"
              },
              "id": "SBLW022",
              "name": "Vuln.Coherence",
              "shortDescription": {
                "text": "Known Vulnerable Dependency - Update Coherence"
              }
            },
            {
              "fullDescription": {
                "text": "Known Vulnerable Dependency - Update Ecto"
              },
              "help": {
                "markdown": "# Known Vulnerable Dependencies\n\nAn application with known vulnerabilities is more easily subjectedto automated or targeted attacks.\n\nKnown Vulnerable checks can be ignored with the following command:\n\n    $ mix sobelow -i Vuln",
                "text": "# Known Vulnerable Dependencies\n\nAn application with known vulnerabilities is more easily subjectedto automated or targeted attacks.\n\nKnown Vulnerable checks can be ignored with the following command:\n\n    $ mix sobelow -i Vuln"
              },
              "id": "SBLW024",
              "name": "Vuln.Ecto",
              "shortDescription": {
                "text": "Known Vulnerable Dependency - Update Ecto"
              }
            }
          ],
          "semanticVersion": "0.10.6"
        }
      }
    }
  ],
  "version": "2.1.0"
}
